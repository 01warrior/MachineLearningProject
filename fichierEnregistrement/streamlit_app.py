import streamlit as st
import pandas as pd
import joblib
import numpy as np
import os

st.set_page_config(page_title="Pr√©diction de D√©pression √âtudiante", layout="centered", initial_sidebar_state="expanded")

#st.set_page_config(...)

# --- 1. Charger les mod√®les et pr√©processeurs qu'on a sauvegard√©s ---
@st.cache_resource # Pour la performance,on charge une seule fois et on met en cache

def load_resources():
    base_path = os.path.dirname(__file__)
    model_path = os.path.join(base_path, 'logistic_regression_dep_model.joblib')
    model = joblib.load(model_path) # D√©commentez cette ligne et assurez-vous de charger les autres aussi
    
    # Charger les autres fichiers .joblib de la m√™me mani√®re :
    scaler_path = os.path.join(base_path, 'scaler_dep.joblib')
    scaler = joblib.load(scaler_path)
    
    label_mappings_path = os.path.join(base_path, 'label_mappings_dep.joblib')
    label_mappings = joblib.load(label_mappings_path)
    
    final_training_columns_path = os.path.join(base_path, 'final_training_columns.joblib')
    final_training_columns = joblib.load(final_training_columns_path)
    
    original_cols_for_dummies_path = os.path.join(base_path, 'original_cols_for_dummies.joblib')
    original_cols_for_dummies = joblib.load(original_cols_for_dummies_path)
    
    cols_to_scale_path = os.path.join(base_path, 'cols_to_scale.joblib')
    cols_to_scale = joblib.load(cols_to_scale_path)
    
    sleep_mapping_path = os.path.join(base_path, 'sleep_mapping.joblib')
    sleep_mapping = joblib.load(sleep_mapping_path)
    
    top_30_cities_path = os.path.join(base_path, 'top_30_cities.joblib')
    try:
        top_30_cities = joblib.load(top_30_cities_path)
    except FileNotFoundError:
        print(f"Attention: Fichier '{top_30_cities_path}' non trouv√©.")
        top_30_cities = None 
            
    return model, scaler, label_mappings, final_training_columns, original_cols_for_dummies, cols_to_scale, sleep_mapping, top_30_cities

# Charger les ressources
model, scaler, label_mappings, final_training_columns, original_cols_for_dummies, cols_to_scale, sleep_mapping, top_30_cities = load_resources()

# --- 2. D√©finir la fonction de regroupement pour Degree ---
def group_degree(deg):
    deg_str = str(deg).lower()
    if 'class 12' in deg_str or '12th' in deg_str: return 'Class_12'
    elif deg_str.startswith('b.') or deg_str in ['ba', 'bsc', 'bhm', 'bba', 'bca', 'be', 'llb', 'mbbs']: return 'Bachelor'
    elif deg_str.startswith('m.') or deg_str in ['mba', 'msc', 'mpharm', 'ma', 'mhm', 'me', 'md', 'llm']: return 'Master_MD'
    elif 'phd' in deg_str: return 'PhD'
    elif deg_str == 'others': return 'Other_Degree'
    else: return 'Other_Degree'

# --- 3. D√©finir la fonction de pr√©traitement ---
def preprocess_input_streamlit(data_dict_raw):
    # Cr√©er une copie pour √©viter de modifier le dictionnaire original si pass√© par r√©f√©rence
    df_input = pd.DataFrame([data_dict_raw.copy()])

    # 1. Traitement 'Sleep Duration'
    if 'Sleep Duration' in df_input.columns:
        df_input['Sleep_Duration_Numeric'] = df_input['Sleep Duration'].map(sleep_mapping)
        df_input.drop('Sleep Duration', axis=1, inplace=True)

    # 2. Label Encoding pour Gender, Suicidal Thoughts, Family History
    # Les cl√©s dans label_mappings sont 'Gender_Encoded', 'Suicidal_Thoughts_Encoded', etc.
    # Les cl√©s dans data_dict_raw sont les noms originaux des colonnes
    if 'Gender' in df_input.columns:
        df_input['Gender_Encoded'] = df_input['Gender'].map(label_mappings['Gender_Encoded'])
        df_input.drop('Gender', axis=1, inplace=True)
    
    if 'Have you ever had suicidal thoughts ?' in df_input.columns:
        df_input['Suicidal_Thoughts_Encoded'] = df_input['Have you ever had suicidal thoughts ?'].map(label_mappings['Suicidal_Thoughts_Encoded'])
        df_input.drop('Have you ever had suicidal thoughts ?', axis=1, inplace=True)

    if 'Family History of Mental Illness' in df_input.columns:
        df_input['Family_History_Encoded'] = df_input['Family History of Mental Illness'].map(label_mappings['Family_History_Encoded'])
        df_input.drop('Family History of Mental Illness', axis=1, inplace=True)
        
    # 3. Traitement 'Profession' (Is_Student)
    if 'Profession' in df_input.columns:
        df_input['Is_Student'] = df_input['Profession'].apply(lambda x: 1 if x == 'Student' else 0)
        df_input.drop('Profession', axis=1, inplace=True)
            
    # 4. Traitement 'City' (Regroupement en 'City_Processed')
    if 'City' in df_input.columns:
        if top_30_cities is not None:
            df_input['City_Processed'] = df_input['City'].apply(lambda x: x if x in top_30_cities else 'Other_City')
        df_input.drop('City', axis=1, inplace=True)

    # 5. Traitement 'Degree' (Regroupement en 'Degree_Grouped')
    if 'Degree' in df_input.columns:
        # G√©rer le cas 'Others_Degree_Input' venant du selectbox
        if df_input['Degree'].iloc[0] == 'Others_Degree_Input':
            df_input['Degree_Grouped'] = 'Other_Degree' # Mapper √† la cat√©gorie 'Other_Degree'
        else:
            df_input['Degree_Grouped'] = df_input['Degree'].apply(group_degree)
        df_input.drop('Degree', axis=1, inplace=True)

    # 6. One-Hot Encoding avec pd.get_dummies
    # original_cols_for_dummies = ['City_Processed', 'Dietary Habits', 'Degree_Grouped']
    cols_to_get_dummies_present_in_df = [col for col in original_cols_for_dummies if col in df_input.columns]
    if cols_to_get_dummies_present_in_df:
        df_input = pd.get_dummies(df_input, columns=cols_to_get_dummies_present_in_df, dtype=int)
    
    # 7. R√©indexer pour correspondre exactement aux colonnes d'entra√Ænement
    df_processed = df_input.reindex(columns=final_training_columns, fill_value=0)
    
    # 8. Mise √† l'√©chelle
    # cols_to_scale doit contenir les noms apr√®s transformation (ex: 'Sleep_Duration_Numeric')
    cols_to_scale_present_final_in_df = [col for col in cols_to_scale if col in df_processed.columns]

    if cols_to_scale_present_final_in_df:
         df_processed[cols_to_scale_present_final_in_df] = scaler.transform(df_processed[cols_to_scale_present_final_in_df])
    
    return df_processed

    # --- 4. Interface Utilisateur Streamlit ---
st.title("üéì Pr√©diction de D√©pression chez les √âtudiants")
st.markdown("Entrez les informations de l'√©tudiant pour obtenir une pr√©diction sur son √©tat de sant√© mentale.")

# Noms de colonnes originaux
# CES NOMS CORRESPONDE AUX CL√âS QUE NOUS UTILISERONS DANS `input_data`
feature_labels = {
    "Age": "√Çge",
    "Gender": "Genre",
    "City": "Ville",
    "Profession": "Profession",
    "Academic Pressure": "Pression Acad√©mique (1-5)",
    "Work Pressure": "Pression Professionnelle (0-5)",
    "CGPA": "Moyenne Cumulative (CGPA 0-10)",
    "Study Satisfaction": "Satisfaction des √âtudes (1-5)",
    "Job Satisfaction": "Satisfaction Professionnelle (0-5)",
    "Sleep Duration": "Dur√©e du Sommeil",
    "Dietary Habits": "Habitudes Alimentaires",
    "Degree": "Dipl√¥me",
    "Have you ever had suicidal thoughts ?": "Pens√©es Suicidaires Ant√©rieures ?",
    "Work/Study Hours": "Heures de Travail/√âtude par jour",
    "Financial Stress": "Stress Financier (1-5)",
    "Family History of Mental Illness": "Ant√©c√©dents Familiaux de Maladie Mentale"
}

# Dictionnaire pour stocker les entr√©es de l'utilisateur
input_data = {} 

# Cr√©er des formulaires pour une meilleure organisation
with st.form(key='prediction_form'):
    st.subheader("Informations Personnelles et Acad√©miques")
    col1, col2 = st.columns(2)
    with col1:
        input_data["Age"] = st.number_input(feature_labels["Age"], min_value=15, max_value=50, value=22, step=1)
        input_data["Gender"] = st.selectbox(feature_labels["Gender"], options=list(label_mappings['Gender_Encoded'].keys()), index=0)
        
        if top_30_cities is not None:
            city_options_display = sorted(list(top_30_cities) + ['Autre Ville (Other_City)'])
            selected_city_display = st.selectbox(feature_labels["City"], options=city_options_display, index=0)
            input_data["City"] = 'Other_City' if selected_city_display == 'Autre Ville (Other_City)' else selected_city_display
        else:
            input_data["City"] = st.text_input(f"{feature_labels['City']} (ex: Kalyan, Srinagar, ...)", "Kalyan")

        profession_options = ['Student', 'Architect', 'Teacher', 'Digital Marketer', 'Content Writer', 'Chef', 'Doctor', 'Pharmacist', 'Civil Engineer', 'UX/UI Designer', 'Educational Consultant', 'Manager', 'Lawyer', 'Entrepreneur', 'Autre Profession']
        selected_profession = st.selectbox(feature_labels["Profession"], options=profession_options, index=0)
        input_data["Profession"] = 'Other' if selected_profession == 'Autre Profession' else selected_profession


    with col2:
        input_data["Degree"] = st.selectbox(feature_labels["Degree"], 
                                        options=['Class 12', 'B.Ed', 'B.Com', 'B.Arch', 'BCA', 'MSc', 'B.Tech', 'MCA', 
                                                 'M.Tech', 'BHM', 'BSc', 'M.Ed', 'B.Pharm', 'M.Com', 'BBA', 'MBBS', 
                                                 'LLB', 'BE', 'BA', 'M.Pharm', 'MD', 'MBA', 'MA', 'PhD', 'LLM', 'MHM', 'ME', 'Others_Degree_Input'], index=0)
        input_data["CGPA"] = st.slider(feature_labels["CGPA"], 0.0, 10.0, 7.5, step=0.01)
        input_data["Work/Study Hours"] = st.slider(feature_labels["Work/Study Hours"], 0.0, 18.0, 6.0, step=0.5)

    st.markdown("---")
    st.subheader("Pressions et Satisfactions")
    col3, col4 = st.columns(2)
    with col3:
        input_data["Academic Pressure"] = st.slider(feature_labels["Academic Pressure"], 1.0, 5.0, 3.0, step=0.1)
        input_data["Study Satisfaction"] = st.slider(feature_labels["Study Satisfaction"], 1.0, 5.0, 3.0, step=0.1)
    with col4:
        input_data["Work Pressure"] = st.slider(feature_labels["Work Pressure"], 0.0, 5.0, 2.0, step=0.1) # Noter que 0 est une option
        input_data["Job Satisfaction"] = st.slider(feature_labels["Job Satisfaction"], 0.0, 5.0, 2.0, step=0.1) # Noter que 0 est une option

    st.markdown("---")
    st.subheader("Habitudes de Vie et Sant√© Mentale")
    col5, col6 = st.columns(2)
    with col5:
        sleep_duration_options = list(sleep_mapping.keys())
        input_data["Sleep Duration"] = st.selectbox(feature_labels["Sleep Duration"], options=sleep_duration_options, index=0)
        input_data["Dietary Habits"] = st.selectbox(feature_labels["Dietary Habits"], options=['Healthy', 'Moderate', 'Unhealthy', 'Others'], index=0)
        input_data["Financial Stress"] = st.slider(feature_labels["Financial Stress"], 1.0, 5.0, 2.0, step=0.1)
    with col6:
        input_data["Have you ever had suicidal thoughts ?"] = st.radio(
            feature_labels["Have you ever had suicidal thoughts ?"],
            options=list(label_mappings['Suicidal_Thoughts_Encoded'].keys()), index=0, horizontal=True
        )
        input_data["Family History of Mental Illness"] = st.radio(
            feature_labels["Family History of Mental Illness"],
            options=list(label_mappings['Family_History_Encoded'].keys()), index=0, horizontal=True
        )
    
    st.markdown("---")
    submit_button = st.form_submit_button(label="Obtenir la Pr√©diction ‚ú®", use_container_width=True)


# Logique de pr√©diction apr√®s soumission du formulaire
if submit_button:
        with st.spinner("Analyse en cours..."):
            try:
                processed_df = preprocess_input_streamlit(input_data)
                
                if isinstance(processed_df, str): # Si preprocess_input retourne un message d'erreur
                    st.error(processed_df)

                else: # Si le pr√©traitement est r√©ussi
                    prediction = model.predict(processed_df)
                    prediction_proba = model.predict_proba(processed_df)
                    prob_depression = prediction_proba[0][1]

                    st.subheader("R√©sultat de la Pr√©diction :")
                    if prediction[0] == 1:
                        st.error("Le mod√®le pr√©dit un statut de **D√©pression**.", icon="üòü")
                    else:
                        st.success("Le mod√®le pr√©dit un statut de **Non-D√©pression**.", icon="üòä")

                    st.metric(label="Probabilit√© de D√©pression (Classe 1)", value=f"{prediction_proba[0][1]:.2%}")
            
                    st.markdown("---")
                    st.subheader("üí° Nos Suggestions :")

                    if prob_depression >= 0.75: # Probabilit√© tr√®s √©lev√©e
                           st.error("‚ö†Ô∏è **Probabilit√© de d√©pression tr√®s √©lev√©e.**")
                           st.markdown("""
                                Il est **fortement recommand√©** de consulter un professionnel de la sant√© mentale (psychologue, psychiatre, m√©decin g√©n√©raliste) d√®s que possible. 
                                N'h√©sitez pas √† en parler √† une personne de confiance (famille, amis, conseiller d'orientation de l'√©cole).
                                    
                                **Ressources d'aide imm√©diate :**
                                *   Veuillez Visiter ce site pour obtenir de laide https://www.sante.gov.ma/
                                *   Services de sant√© de votre √©tablissement d'enseignement.
                                    
                                Il est important de ne pas rester seul(e) avec ces sentiments.
                            """)
                    elif prob_depression >= 0.50: # Probabilit√© mod√©r√©e √† √©lev√©e
                            st.warning("üî∂ **Probabilit√© de d√©pression mod√©r√©e √† √©lev√©e.**")
                            st.markdown("""
                                Il serait b√©n√©fique d'envisager de parler √† un professionnel de la sant√© mentale pour une √©valuation plus approfondie. 
                                Surveillez attentivement votre humeur et votre bien-√™tre.
                                
                                **Pistes √† explorer :**
                                *   Techniques de gestion du stress (m√©ditation, pleine conscience, exercice physique r√©gulier).
                                *   Assurer un sommeil suffisant et une alimentation √©quilibr√©e.
                                *   Parler de vos ressentis √† des proches.
                                *   Consulter les services de soutien psychologique de votre √©tablissement.
                            """)
                    elif prob_depression >= 0.25: # Probabilit√© faible √† mod√©r√©e
                            st.info("üî∑ **Probabilit√© de d√©pression faible √† mod√©r√©e.**")
                            st.markdown("""
                                Bien que la probabilit√© soit plus faible, il est toujours important de prendre soin de votre sant√© mentale. 
                                Continuez √† adopter des habitudes de vie saines.
                                
                                **Conseils pr√©ventifs :**
                                *   Maintenez un bon √©quilibre entre √©tudes/travail et loisirs.
                                *   Cultivez vos relations sociales et passez du temps avec des personnes qui vous soutiennent.
                                *   N'h√©sitez pas √† demander de l'aide si vous sentez que votre humeur se d√©grade.
                                *   L'exercice physique r√©gulier et une bonne alimentation contribuent positivement √† l'humeur.
                            """)
                    else: # Probabilit√© faible
                            st.success("‚úÖ **Probabilit√© de d√©pression faible.**")
                            st.markdown("""
                                C'est une bonne nouvelle ! Continuez √† prendre soin de vous.
                                
                                **Pour maintenir votre bien-√™tre :**
                                *   Poursuivez vos activit√©s plaisantes et relaxantes.
                                *   Restez attentif(ve) aux signes de stress ou de changement d'humeur.
                                *   Entretenez des relations sociales positives.
                            """)
                        
                    st.markdown("---")

                    st.caption("**Avertissement :** Cette pr√©diction est bas√©e sur un mod√®le statistique et ne constitue pas un diagnostic m√©dical. Si vous avez des inqui√©tudes concernant votre sant√© mentale, veuillez consulter un professionnel de la sant√©.")

    
            except Exception as e:
                st.error(f"Une erreur est survenue lors de la pr√©diction : {e}")
                st.error("Veuillez v√©rifier les valeurs d'entr√©e et la configuration du pr√©traitement. Consultez la console pour plus de d√©tails si vous ex√©cutez localement.")
                print(f"Erreur d√©taill√©e: {e}")



# --- 5. Sidebar et Informations Compl√©mentaires ---
st.markdown("---")

st.sidebar.header("‚ÑπÔ∏è √Ä Propos de notre Application")

st.sidebar.info(
    "Cette application utilise un mod√®le de **R√©gression Logistique** pour estimer "
    "la probabilit√© de d√©pression chez les √©tudiants. Elle est bas√©e sur un dataset "
    "comprenant divers facteurs socio-d√©mographiques, acad√©miques et de style de vie."
    "\n\n**Note:** Ceci est un outil de d√©monstration et ne doit pas remplacer un diagnostic m√©dical professionnel."
)

st.sidebar.markdown("---")
st.sidebar.markdown("D√©velopp√© par Soumaila SAVAODOGO, Walid Razzouk et Boutaina¬†Er-ragragy")
